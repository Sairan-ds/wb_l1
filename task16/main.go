package main

import (
	"fmt"
)

func main() {
	ar := []int{3, 4, 1, 2, 5, 7, -1, 0}
	Quicksort(ar)
	fmt.Println(ar)
}
// Быстрая сортировка
func Quicksort(ar []int) {
	if len(ar) <= 1 {
		return
	}
	// из массива выбирается некоторый опорный элемент pivot
	// запускается процедура разделения массива, которая перемещает все значения, меньшие, либо равные pivot, 
	// влево от него, а все значения, большие, либо равные pivot - вправо
	split := partition(ar)
	// теперь массив состоит из двух подмножеств, причем левое меньше, либо равно правого,
	// для обоих подмассивов: если в подмассиве более двух элементов, рекурсивно запускаем для него ту же процедуру.
	Quicksort(ar[:split])
	Quicksort(ar[split:])
}
// Разделение массива
func partition(ar []int) int {
	/* 1) Введем два указателя: left и right. В начале алгоритма они указывают, соответственно, на левый и правый конец последовательности.
	   2)Будем двигать указатель i с шагом в 1 элемент по направлению к концу массива, пока не будет найден элемент a[left] >= pivot. Затем аналогичным образом начнем двигать указатель j от конца массива к началу, пока не будет найден a[right] <= pivot.
	   3)Далее, если left <= right, меняем a[i] и a[j] местами и продолжаем двигать i,j по тем же правилам...
	   4)Повторяем шаг 3, пока i <= j. */
	pivot := ar[len(ar)/2]

	left := 0
	right := len(ar) - 1
	for {
		for 
		; ar[left] < pivot; left++ {
		}
		for ; ar[right] > pivot; right-- {
		}

		if left >= right {
			return right
		}

		swap(ar, left, right)
	
	}
	// Теперь массив разделен на две части: все элементы левой меньше либо равны p, все элементы правой - больше, либо равны p. Разделение завершено.
}

func swap(ar []int, i, j int) {
	tmp := ar[i]
	ar[i] = ar[j]
	ar[j] = tmp
}
